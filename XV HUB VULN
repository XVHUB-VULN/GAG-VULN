local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

Rayfield:LoadConfiguration()

local Window = Rayfield:CreateWindow({
   Name = "GAG VULN",
   Icon = 0, -- Icon in Topbar. Can use Lucide Icons (string) or Roblox Image (number). 0 to use no icon (default).
   LoadingTitle = "XV Hub Loading",
   LoadingSubtitle = "by Raf",
   ShowText = "XV HUB", -- for mobile users to unhide rayfield, change if you'd like
   Theme = "Amethyst", -- Check https://docs.sirius.menu/rayfield/configuration/themes

   ToggleUIKeybind = "K", -- The keybind to toggle the UI visibility (string like "K" or Enum.KeyCode)

   DisableRayfieldPrompts = false,
   DisableBuildWarnings = false, -- Prevents Rayfield from warning when the script has a version mismatch with the interface

   ConfigurationSaving = {
      Enabled = true,
      FolderName = nil, -- Create a custom folder for your hub/game
      FileName = "XV Hub"
   },

   Discord = {
      Enabled = True, -- Prompt the user to join your Discord server if their executor supports it
      Invite = "https://discord.gg/gH8QpQdKuU", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ ABCD would be ABCD
      RememberJoins = true -- Set this to false to make them join the discord every time they load it up
   },

   KeySystem = false, -- Set this to true to use our key system
   KeySettings = {
      Title = "Untitled",
      Subtitle = "Key System",
      Note = "No method of obtaining the key is provided", -- Use this to tell the user how to get a key
      FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
      SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
      GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
      Key = {"Hello"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
   }
})

local Tab = Window:CreateTab("Dino Crafter", 4483362458) -- Title, Image
local TabMisc = Window:CreateTab("Misc", 4483362458) -- Title, Image

local Label = Tab:CreateLabel("When choosing the thing you wanted to craft, rejoin the game.", 4483362458, Color3.fromRGB(255, 255, 255), false) -- Title, Icon, Color, IgnoreTheme
local Label = TabMisc:CreateLabel("Suggest more features, functions on our discord server!", 4483362458, Color3.fromRGB(255, 255, 255), false) -- Title, Icon, Color, IgnoreTheme

local Button = Tab:CreateButton({
   Name = "Craft Ancient Seed Pack",
   Callback = function()
   -- repeat task.wait() until game:IsLoaded()

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local TeleportService = game:GetService("TeleportService")
local LocalPlayer = Players.LocalPlayer
local Backpack = LocalPlayer:WaitForChild("Backpack")
local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local CraftingService = ReplicatedStorage.GameEvents.CraftingGlobalObjectService

local DinoEvent = workspace:FindFirstChild("DinoEvent") or ReplicatedStorage.Modules:WaitForChild("UpdateService"):WaitForChild("DinoEvent")
if DinoEvent and DinoEvent:IsDescendantOf(ReplicatedStorage) then
    DinoEvent.Parent = workspace
end

local DinoTable = workspace:WaitForChild("DinoEvent"):WaitForChild("DinoCraftingTable")

-- Set recipe to craft Ancient Seed Pack
CraftingService:FireServer("SetRecipe", DinoTable, "DinoEventWorkbench", "Ancient Seed Pack")
task.wait(0.3)

-- Input Dinosaur Egg only
for _, tool in ipairs(Backpack:GetChildren()) do
    if tool:IsA("Tool") and tool:GetAttribute("h") == "Dinosaur Egg" then
        tool.Parent = Character
        task.wait(0.3)
        local uuid = tool:GetAttribute("c")
        if uuid then
            CraftingService:FireServer("InputItem", DinoTable, "DinoEventWorkbench", 1, {
                ItemType = "PetEgg",
                ItemData = { UUID = uuid }
            })
        end
        tool.Parent = Backpack
        break
    end
end

-- Skip Bone Blossom, not needed

-- Fire Craft
task.wait(0.3)
CraftingService:FireServer("Craft", DinoTable, "DinoEventWorkbench")
task.wait(1)
   end,
})
repeat task.wait() until game:IsLoaded()

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local TeleportService = game:GetService("TeleportService")
local LocalPlayer = Players.LocalPlayer
local Backpack = LocalPlayer:WaitForChild("Backpack")
local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local CraftingService = ReplicatedStorage.GameEvents.CraftingGlobalObjectService

local DinoEvent = workspace:FindFirstChild("DinoEvent") or ReplicatedStorage.Modules:WaitForChild("UpdateService"):WaitForChild("DinoEvent")
if DinoEvent and DinoEvent:IsDescendantOf(ReplicatedStorage) then
    DinoEvent.Parent = workspace
end

local DinoTable = workspace:WaitForChild("DinoEvent"):WaitForChild("DinoCraftingTable")

CraftingService:FireServer("SetRecipe", DinoTable, "DinoEventWorkbench", "Dinosaur Egg")
task.wait(0.3)

for _, tool in ipairs(Backpack:GetChildren()) do
    if tool:IsA("Tool") and tool:GetAttribute("h") == "Common Egg" then
        tool.Parent = Character
        task.wait(0.3)
        local uuid = tool:GetAttribute("c")
        if uuid then
            CraftingService:FireServer("InputItem", DinoTable, "DinoEventWorkbench", 1, {
                ItemType = "PetEgg",
                ItemData = { UUID = uuid }
            })
        end
        tool.Parent = Backpack
        break
    end
end

for _, tool in ipairs(Backpack:GetChildren()) do
    if tool:IsA("Tool") and tool:GetAttribute("f") == "Bone Blossom" then
        for _, t in ipairs(Character:GetChildren()) do
            if t:IsA("Tool") then
                t.Parent = Backpack
            end
        end
        tool.Parent = Character
        task.wait(0.3)
        local uuid = tool:GetAttribute("c")
        if uuid then
            CraftingService:FireServer("InputItem", DinoTable, "DinoEventWorkbench", 2, {
                ItemType = "Holdable",
                ItemData = { UUID = uuid }
            })
        end
        tool.Parent = Backpack
        break
    end
end

task.wait(0.3)
CraftingService:FireServer("Craft", DinoTable, "DinoEventWorkbench")
task.wait(1)

local Button = Tab:CreateButton({
   Name = "Craft Dino Egg",
   Callback = function()
   -- repeat task.wait() until game:IsLoaded()

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local TeleportService = game:GetService("TeleportService")
local LocalPlayer = Players.LocalPlayer
local Backpack = LocalPlayer:WaitForChild("Backpack")
local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local CraftingService = ReplicatedStorage.GameEvents.CraftingGlobalObjectService

local DinoEvent = workspace:FindFirstChild("DinoEvent") or ReplicatedStorage.Modules:WaitForChild("UpdateService"):WaitForChild("DinoEvent")
if DinoEvent and DinoEvent:IsDescendantOf(ReplicatedStorage) then
    DinoEvent.Parent = workspace
end

local DinoTable = workspace:WaitForChild("DinoEvent"):WaitForChild("DinoCraftingTable")

CraftingService:FireServer("SetRecipe", DinoTable, "DinoEventWorkbench", "Dinosaur Egg")
task.wait(0.3)

for _, tool in ipairs(Backpack:GetChildren()) do
    if tool:IsA("Tool") and tool:GetAttribute("h") == "Common Egg" then
        tool.Parent = Character
        task.wait(0.3)
        local uuid = tool:GetAttribute("c")
        if uuid then
            CraftingService:FireServer("InputItem", DinoTable, "DinoEventWorkbench", 1, {
                ItemType = "PetEgg",
                ItemData = { UUID = uuid }
            })
        end
        tool.Parent = Backpack
        break
    end
end

for _, tool in ipairs(Backpack:GetChildren()) do
    if tool:IsA("Tool") and tool:GetAttribute("f") == "Bone Blossom" then
        for _, t in ipairs(Character:GetChildren()) do
            if t:IsA("Tool") then
                t.Parent = Backpack
            end
        end
        tool.Parent = Character
        task.wait(0.3)
        local uuid = tool:GetAttribute("c")
        if uuid then
            CraftingService:FireServer("InputItem", DinoTable, "DinoEventWorkbench", 2, {
                ItemType = "Holdable",
                ItemData = { UUID = uuid }
            })
        end
        tool.Parent = Backpack
        break
    end
end

task.wait(0.3)
CraftingService:FireServer("Craft", DinoTable, "DinoEventWorkbench")
task.wait(1)
   end,
})

local Button = Tab:CreateButton({
   Name = "Craft Primal Egg",
   Callback = function()
   -- repeat task.wait() until game:IsLoaded()

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local TeleportService = game:GetService("TeleportService")
local LocalPlayer = Players.LocalPlayer
local Backpack = LocalPlayer:WaitForChild("Backpack")
local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local CraftingService = ReplicatedStorage.GameEvents.CraftingGlobalObjectService

local DinoEvent = workspace:FindFirstChild("DinoEvent") or ReplicatedStorage.Modules:WaitForChild("UpdateService"):WaitForChild("DinoEvent")
if DinoEvent and DinoEvent:IsDescendantOf(ReplicatedStorage) then
    DinoEvent.Parent = workspace
end

local DinoTable = workspace:WaitForChild("DinoEvent"):WaitForChild("DinoCraftingTable")

CraftingService:FireServer("SetRecipe", DinoTable, "DinoEventWorkbench", "Primal Egg")
task.wait(0.3)

for _, tool in ipairs(Backpack:GetChildren()) do
    if tool:IsA("Tool") and tool:GetAttribute("h") == "Dinosaur Egg" then
        tool.Parent = Character
        task.wait(0.3)
        local uuid = tool:GetAttribute("c")
        if uuid then
            CraftingService:FireServer("InputItem", DinoTable, "DinoEventWorkbench", 1, {
                ItemType = "PetEgg",
                ItemData = { UUID = uuid }
            })
        end
        tool.Parent = Backpack
        break
    end
end

for _, tool in ipairs(Backpack:GetChildren()) do
    if tool:IsA("Tool") and tool:GetAttribute("f") == "Bone Blossom" then
        for _, t in ipairs(Character:GetChildren()) do
            if t:IsA("Tool") then
                t.Parent = Backpack
            end
        end
        tool.Parent = Character
        task.wait(0.3)
        local uuid = tool:GetAttribute("c")
        if uuid then
            CraftingService:FireServer("InputItem", DinoTable, "DinoEventWorkbench", 2, {
                ItemType = "Holdable",
                ItemData = { UUID = uuid }
            })
        end
        tool.Parent = Backpack
        break
    end
end

task.wait(0.3)
CraftingService:FireServer("Craft", DinoTable, "DinoEventWorkbench")
task.wait(1)
   end,
})local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

Rayfield:LoadConfiguration()

local Window = Rayfield:CreateWindow({
   Name = "GAG VULN",
   Icon = 0, -- Icon in Topbar. Can use Lucide Icons (string) or Roblox Image (number). 0 to use no icon (default).
   LoadingTitle = "XV Hub Loading",
   LoadingSubtitle = "by Raf",
   ShowText = "Rayfield", -- for mobile users to unhide rayfield, change if you'd like
   Theme = "Amethyst", -- Check https://docs.sirius.menu/rayfield/configuration/themes

   ToggleUIKeybind = "K", -- The keybind to toggle the UI visibility (string like "K" or Enum.KeyCode)

   DisableRayfieldPrompts = false,
   DisableBuildWarnings = false, -- Prevents Rayfield from warning when the script has a version mismatch with the interface

   ConfigurationSaving = {
      Enabled = true,
      FolderName = nil, -- Create a custom folder for your hub/game
      FileName = "XV Hub"
   },

   Discord = {
      Enabled = True, -- Prompt the user to join your Discord server if their executor supports it
      Invite = "https://discord.gg/gH8QpQdKuU", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ ABCD would be ABCD
      RememberJoins = true -- Set this to false to make them join the discord every time they load it up
   },

   KeySystem = false, -- Set this to true to use our key system
   KeySettings = {
      Title = "Untitled",
      Subtitle = "Key System",
      Note = "No method of obtaining the key is provided", -- Use this to tell the user how to get a key
      FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
      SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
      GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
      Key = {"Hello"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
   }
})

local Tab = Window:CreateTab("Dino Crafter", 4483362458) -- Title, Image
local TabMisc = Window:CreateTab("Misc", 4483362458) -- Title, Image

local Label = Tab:CreateLabel("When choosing the thing you wanted to craft, rejoin the game.", 4483362458, Color3.fromRGB(255, 255, 255), false) -- Title, Icon, Color, IgnoreTheme
local Label = TabMisc:CreateLabel("Suggest more features, functions on our discord server!", 4483362458, Color3.fromRGB(255, 255, 255), false) -- Title, Icon, Color, IgnoreTheme

local Button = Tab:CreateButton({
   Name = "Craft Ancient Seed Pack",
   Callback = function()
   -- repeat task.wait() until game:IsLoaded()

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local TeleportService = game:GetService("TeleportService")
local LocalPlayer = Players.LocalPlayer
local Backpack = LocalPlayer:WaitForChild("Backpack")
local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local CraftingService = ReplicatedStorage.GameEvents.CraftingGlobalObjectService

local DinoEvent = workspace:FindFirstChild("DinoEvent") or ReplicatedStorage.Modules:WaitForChild("UpdateService"):WaitForChild("DinoEvent")
if DinoEvent and DinoEvent:IsDescendantOf(ReplicatedStorage) then
    DinoEvent.Parent = workspace
end

local DinoTable = workspace:WaitForChild("DinoEvent"):WaitForChild("DinoCraftingTable")

-- Set recipe to craft Ancient Seed Pack
CraftingService:FireServer("SetRecipe", DinoTable, "DinoEventWorkbench", "Ancient Seed Pack")
task.wait(0.3)

-- Input Dinosaur Egg only
for _, tool in ipairs(Backpack:GetChildren()) do
    if tool:IsA("Tool") and tool:GetAttribute("h") == "Dinosaur Egg" then
        tool.Parent = Character
        task.wait(0.3)
        local uuid = tool:GetAttribute("c")
        if uuid then
            CraftingService:FireServer("InputItem", DinoTable, "DinoEventWorkbench", 1, {
                ItemType = "PetEgg",
                ItemData = { UUID = uuid }
            })
        end
        tool.Parent = Backpack
        break
    end
end

-- Skip Bone Blossom, not needed

-- Fire Craft
task.wait(0.3)
CraftingService:FireServer("Craft", DinoTable, "DinoEventWorkbench")
task.wait(1)
   end,
})
repeat task.wait() until game:IsLoaded()

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local TeleportService = game:GetService("TeleportService")
local LocalPlayer = Players.LocalPlayer
local Backpack = LocalPlayer:WaitForChild("Backpack")
local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local CraftingService = ReplicatedStorage.GameEvents.CraftingGlobalObjectService

local DinoEvent = workspace:FindFirstChild("DinoEvent") or ReplicatedStorage.Modules:WaitForChild("UpdateService"):WaitForChild("DinoEvent")
if DinoEvent and DinoEvent:IsDescendantOf(ReplicatedStorage) then
    DinoEvent.Parent = workspace
end

local DinoTable = workspace:WaitForChild("DinoEvent"):WaitForChild("DinoCraftingTable")

CraftingService:FireServer("SetRecipe", DinoTable, "DinoEventWorkbench", "Dinosaur Egg")
task.wait(0.3)

for _, tool in ipairs(Backpack:GetChildren()) do
    if tool:IsA("Tool") and tool:GetAttribute("h") == "Common Egg" then
        tool.Parent = Character
        task.wait(0.3)
        local uuid = tool:GetAttribute("c")
        if uuid then
            CraftingService:FireServer("InputItem", DinoTable, "DinoEventWorkbench", 1, {
                ItemType = "PetEgg",
                ItemData = { UUID = uuid }
            })
        end
        tool.Parent = Backpack
        break
    end
end

for _, tool in ipairs(Backpack:GetChildren()) do
    if tool:IsA("Tool") and tool:GetAttribute("f") == "Bone Blossom" then
        for _, t in ipairs(Character:GetChildren()) do
            if t:IsA("Tool") then
                t.Parent = Backpack
            end
        end
        tool.Parent = Character
        task.wait(0.3)
        local uuid = tool:GetAttribute("c")
        if uuid then
            CraftingService:FireServer("InputItem", DinoTable, "DinoEventWorkbench", 2, {
                ItemType = "Holdable",
                ItemData = { UUID = uuid }
            })
        end
        tool.Parent = Backpack
        break
    end
end

task.wait(0.3)
CraftingService:FireServer("Craft", DinoTable, "DinoEventWorkbench")
task.wait(1)

local Button = Tab:CreateButton({
   Name = "Craft Dino Egg",
   Callback = function()
   -- repeat task.wait() until game:IsLoaded()

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local TeleportService = game:GetService("TeleportService")
local LocalPlayer = Players.LocalPlayer
local Backpack = LocalPlayer:WaitForChild("Backpack")
local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local CraftingService = ReplicatedStorage.GameEvents.CraftingGlobalObjectService

local DinoEvent = workspace:FindFirstChild("DinoEvent") or ReplicatedStorage.Modules:WaitForChild("UpdateService"):WaitForChild("DinoEvent")
if DinoEvent and DinoEvent:IsDescendantOf(ReplicatedStorage) then
    DinoEvent.Parent = workspace
end

local DinoTable = workspace:WaitForChild("DinoEvent"):WaitForChild("DinoCraftingTable")

CraftingService:FireServer("SetRecipe", DinoTable, "DinoEventWorkbench", "Dinosaur Egg")
task.wait(0.3)

for _, tool in ipairs(Backpack:GetChildren()) do
    if tool:IsA("Tool") and tool:GetAttribute("h") == "Common Egg" then
        tool.Parent = Character
        task.wait(0.3)
        local uuid = tool:GetAttribute("c")
        if uuid then
            CraftingService:FireServer("InputItem", DinoTable, "DinoEventWorkbench", 1, {
                ItemType = "PetEgg",
                ItemData = { UUID = uuid }
            })
        end
        tool.Parent = Backpack
        break
    end
end

for _, tool in ipairs(Backpack:GetChildren()) do
    if tool:IsA("Tool") and tool:GetAttribute("f") == "Bone Blossom" then
        for _, t in ipairs(Character:GetChildren()) do
            if t:IsA("Tool") then
                t.Parent = Backpack
            end
        end
        tool.Parent = Character
        task.wait(0.3)
        local uuid = tool:GetAttribute("c")
        if uuid then
            CraftingService:FireServer("InputItem", DinoTable, "DinoEventWorkbench", 2, {
                ItemType = "Holdable",
                ItemData = { UUID = uuid }
            })
        end
        tool.Parent = Backpack
        break
    end
end

task.wait(0.3)
CraftingService:FireServer("Craft", DinoTable, "DinoEventWorkbench")
task.wait(1)
   end,
})

local Button = Tab:CreateButton({
   Name = "Craft Primal Egg",
   Callback = function()
   -- repeat task.wait() until game:IsLoaded()

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local TeleportService = game:GetService("TeleportService")
local LocalPlayer = Players.LocalPlayer
local Backpack = LocalPlayer:WaitForChild("Backpack")
local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local CraftingService = ReplicatedStorage.GameEvents.CraftingGlobalObjectService

local DinoEvent = workspace:FindFirstChild("DinoEvent") or ReplicatedStorage.Modules:WaitForChild("UpdateService"):WaitForChild("DinoEvent")
if DinoEvent and DinoEvent:IsDescendantOf(ReplicatedStorage) then
    DinoEvent.Parent = workspace
end

local DinoTable = workspace:WaitForChild("DinoEvent"):WaitForChild("DinoCraftingTable")

CraftingService:FireServer("SetRecipe", DinoTable, "DinoEventWorkbench", "Primal Egg")
task.wait(0.3)

for _, tool in ipairs(Backpack:GetChildren()) do
    if tool:IsA("Tool") and tool:GetAttribute("h") == "Dinosaur Egg" then
        tool.Parent = Character
        task.wait(0.3)
        local uuid = tool:GetAttribute("c")
        if uuid then
            CraftingService:FireServer("InputItem", DinoTable, "DinoEventWorkbench", 1, {
                ItemType = "PetEgg",
                ItemData = { UUID = uuid }
            })
        end
        tool.Parent = Backpack
        break
    end
end

for _, tool in ipairs(Backpack:GetChildren()) do
    if tool:IsA("Tool") and tool:GetAttribute("f") == "Bone Blossom" then
        for _, t in ipairs(Character:GetChildren()) do
            if t:IsA("Tool") then
                t.Parent = Backpack
            end
        end
        tool.Parent = Character
        task.wait(0.3)
        local uuid = tool:GetAttribute("c")
        if uuid then
            CraftingService:FireServer("InputItem", DinoTable, "DinoEventWorkbench", 2, {
                ItemType = "Holdable",
                ItemData = { UUID = uuid }
            })
        end
        tool.Parent = Backpack
        break
    end
end

task.wait(0.3)
CraftingService:FireServer("Craft", DinoTable, "DinoEventWorkbench")
task.wait(1)
   end,
})
